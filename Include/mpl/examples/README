hello_world.cc
  Simple hello-world program.  Initializes the message passing
  environment and determines the number of processes and rank.

blocking.cc
  Demonstrates various blocking send and receive modes of standard
  data types.

blocking_vector.cc
  Demonstrates blocking send and receive of a vector of standard data
  types.

probe.cc
  Demonstrated how to probe data and to receive a message of unknown size.

nonblocking.cc
  Demonstrates nonblocking send and receive of standard data types and
  vectors of standard data types and different waiting methods.

nonblocking_mult.cc
  Utilizes nonblocking send and receive of standard data types to
  implement a gather operation.

standard_types.cc
  Sends and receives data of various standard types.

arrays.cc
  Sends and receives arrays (C arrays ans std::array) of fixed size,
  which must be known at compile time.  The types of the array
  elements must be suited for communication.  These rules may be
  applied recursively.

struct.cc
  Demonstrates how to use class mpl::struct_builder to enable
  communication using structures and classes.  Class members must be
  of fixed size (no dynamic memory allocation).  All types of the
  class members must be suited for communication.  These rules may be
  applied recursively.

gather.cc
  Gather data to a single process.

gatherv.cc
  Gather data if varying size to a single process.

collective.cc
  Demonstrates various modes of collective communication.

reduce_lcm.cc
  Demonstrates use of custom reduction functions.

reduce_min_loc.cc
  Demonstrates use of reduction functions for std::pair to determine
  a minimum as its location.

layouts.cc and subarray.cc
  Construction and usage of various data layouts.

communicator.cc
  Demonstrates some basic communicator management.

vibrating_string_mpi.c and vibrating_string_mpl.cc
  Solve one-dimensional wave equation via finite differences, MPI
  version vs. MPL version.

matrix_gather:
  Demonstrates gathering of a distributed matrix as it may used in domain
  partitioning applications.

distributed_grid.cc
  Data type distributed_grid in action.

heat_equation_successive_over-relaxation.cc heat_equation_Jacobi_method.cc
  Solves the two-dimensional time-independent heat equation with fixed
  temperatures at the border via successive over-relaxation and Jacobi
  iterations.  Implementation uses distributed_grid.
